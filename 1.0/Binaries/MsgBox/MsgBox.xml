<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsgBox</name>
    </assembly>
    <members>
        <member name="T:MsgBox.Commands.RelayCommand`1">
            <summary>
            A command whose sole purpose is to 
            relay its functionality to other
            objects by invoking delegates. The
            default return value for the CanExecute
            method is 'true'.
            
            Source: http://www.codeproject.com/Articles/31837/Creating-an-Internationalized-Wizard-in-WPF
            </summary>
        </member>
        <member name="M:MsgBox.Commands.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Class constructor
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:MsgBox.Commands.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="M:MsgBox.Commands.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determine whether this pre-requisites to execute this command are given or not.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Commands.RelayCommand`1.Execute(System.Object)">
            <summary>
            Execute the command method managed in this class.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:MsgBox.Commands.RelayCommand`1.CanExecuteChanged">
            <summary>
            Eventhandler to re-evaluate whether this command can execute or not
            </summary>
        </member>
        <member name="T:MsgBox.Converter.ImageEnumToVisibilityConverter">
            <summary>
            XAML mark up extension to convert an image enum value into a visibility value.
            This class is used to decide whether an image is shown or not.
            
            The converter returns <seealso cref="F:System.Windows.Visibility.Visible"/>
            if the MsgBoxImage != MsgBoxImage.None, otherwise <seealso cref="F:System.Windows.Visibility.Collapsed"/>
            is returned.
            </summary>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToVisibilityConverter.#ctor">
            <summary>
            Standard Constructor
            </summary>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToVisibilityConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided
            as the value of the target property for this markup extension.
            
            When a XAML processor processes a type node and member value that is a markup extension,
            it invokes the ProvideValue method of that markup extension and writes the result into the
            object graph or serialization stream. The XAML object writer passes service context to each
            such implementation through the serviceProvider parameter.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Null to visibility conversion method
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToVisibilityConverter.SetImageSource(MsgBox.MsgBoxImage)">
            <summary>
            This function does the actual conversion from enum to <seealso cref="T:System.Windows.Visibility"/>.
            </summary>
            <param name="image"></param>
            <returns>Visibility.Collapsed for MsgBoxImage.None or Visibility.Visible for all others.</returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Visibility to Null conversion method (is not implemented)
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MsgBox.Converter.ImageEnumToImageConverter">
            <summary>
            XAML mark up extension to convert a null value into a visibility value.
            This class is used to decide whether text document related controls,
            such as, highlighting patterns is shown or not.
            
            The converter returns <seealso cref="F:System.Windows.Visibility.Visible"/>
            if the currently Active document is a text file that can be highlighted
            and <seealso cref="F:System.Windows.Visibility.Collapsed"/> otherwise.
            </summary>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.#ctor">
            <summary>
            Standard Constructor
            </summary>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided
            as the value of the target property for this markup extension.
            
            When a XAML processor processes a type node and member value that is a markup extension,
            it invokes the ProvideValue method of that markup extension and writes the result into the
            object graph or serialization stream. The XAML object writer passes service context to each
            such implementation through the serviceProvider parameter.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Null to visibility conversion method
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.SetImageSource(MsgBox.MsgBoxImage)">
            <summary>
            This function does the actual conversion from enum to <seealso cref="T:System.Windows.Media.Imaging.BitmapImage"/>.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.GetApplicationResource(System.String)">
            <summary>
            Attempt to locate a dynamic (<seealso cref="T:System.Windows.Media.Imaging.BitmapImage"/>) resource
            and return it or return null if the resource could not be located.
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.ImageEnumToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Visibility to Null conversion method (is not implemented)
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MsgBox.MsgBoxStyle">
            <summary>
            A message box can be presented using different WPF styles.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxStyle.System">
            <summary>
            Use the native Windows system look &amp; feel to show message box dialogs (standard window chrome).
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxStyle.WPFThemed">
            <summary>
            Use a custom WPF look &amp; feel to show message box dialogs (custom window chrome).
            </summary>
        </member>
        <member name="P:MsgBox.IMessageBoxService.Style">
            <summary>
            Get/set property to determine whether message box can be styled in WPF or not.
            </summary>
        </member>
        <member name="T:MsgBox.MessageBoxService">
            <summary>
            A service that shows message boxes.
            
            Source: http://www.codeproject.com/Articles/70223/Using-a-Service-Locator-to-Work-with-MessageBoxes
            </summary>
        </member>
        <member name="M:MsgBox.MessageBoxService.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:MsgBox.MessageBoxService.MsgBox#IMessageBoxService#Show(System.String,System.String,System.String,MsgBox.MsgBoxButtons,MsgBox.MsgBoxImage,MsgBox.MsgBoxResult,System.Object,System.String,System.String,System.Func{System.Object,System.Boolean},System.Boolean)">
            <summary>
            Show a messagebox with details (such as a stacktrace or other information that can be kept in an expander).
            </summary>
            <param name="details"></param>
            <param name="buttonOption"></param>
            <param name="image"></param>
            <param name="btnDefault"></param>
            <param name="caption"></param>
            <param name="helpLink"></param>
            <param name="helpLinkLabel"></param>
            <param name="helpLinkTitle"></param>
            <param name="messageBoxText"></param>
            <param name="navigateHelplinkMethod"></param>
            <param name="showCopyMessage"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.MessageBoxService.MsgBox#IMessageBoxService#Show(System.Windows.Window,System.String,System.String,MsgBox.MsgBoxButtons,MsgBox.MsgBoxImage,MsgBox.MsgBoxResult,System.Object,System.String,System.String,System.Func{System.Object,System.Boolean},System.Boolean)">
            <summary>
            Show message box with explicit referenc to owner window.
            </summary>
            <param name="owner"></param>
            <param name="messageBoxText"></param>
            <param name="caption"></param>
            <param name="buttonOption"></param>
            <param name="image"></param>
            <param name="btnDefault"></param>
            <param name="helpLink"></param>
            <param name="helpLinkTitle"></param>
            <param name="helpLinkLabel"></param>
            <param name="navigateHelplinkMethod"></param>
            <param name="showCopyMessage"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.MessageBoxService.InitializeViewModel(System.Exception,System.String,System.String,System.String,MsgBox.MsgBoxButtons,MsgBox.MsgBoxImage,MsgBox.MsgBoxResult,System.Object,System.String,System.String,System.Func{System.Object,System.Boolean},System.Boolean,MsgBox.MsgBoxResult,System.Boolean)">
            <summary>
            Construct a new message box viewmodel
            </summary>
            <returns></returns>
        </member>
        <member name="P:MsgBox.MessageBoxService.Style">
            <summary>
            Get/set property to determine whether message box can be styled in WPF or not.
            </summary>
        </member>
        <member name="T:MsgBox.Behaviour.DialogCloser">
             <summary>
             Attachable behaviour class that can be used to tell a View (window) to close itself
             when the ViewModel has determined that. Usage in XAML and ViewModel:
             
             ViewModel:
             private this.mDialogCloseResult = null;
             
             public bool? DialogCloseResult
             {
               get
               {
                 return this.mmDialogCloseResult;
               }
            
               private set
               {
                 if (this.mDialogCloseResult != value)
                 {
                   this.mDialogCloseResult = value;
                   this.NotifyPropertyChanged(() => this.DialogCloseResult);
                 }
               }
             }
             
             View:
              
             &lt;Window ...
             xmlns:xc="clr-namespace:MsgBox.Internal.ViewModel"
             xc:DialogCloser.DialogResult="{Binding DialogCloseResult}"&gt;
             
             Source: http://stackoverflow.com/questions/501886/wpf-mvvm-newbie-how-should-the-viewmodel-close-the-form
             </summary>
        </member>
        <member name="M:MsgBox.Behaviour.DialogCloser.SetDialogResult(System.Windows.Window,System.Nullable{System.Boolean})">
            <summary>
            Set portion of the dependency property
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="T:MsgBox.Converter.EnumMatchToBooleanConverter">
            <summary>
            This class can be used to databind a (group of) radio button control(s)
            with an enumeration in a ViewModel.
            
            Source: http://www.wpftutorial.net/RadioButton.html
            </summary>
        </member>
        <member name="M:MsgBox.Converter.EnumMatchToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Enum to Boolean Converter method
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Converter.EnumMatchToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Boolean to Enum Converter method
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault">
            <summary>
            This attached property can be used to set the keyboard focus on a button that has
            IsDefault="True". Keyboard focus is required to support keyboard navigation with cursor keys.
            </summary>
        </member>
        <member name="M:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault.GetSetFocus(System.Windows.DependencyObject)">
            <summary>
            Get portion of dependency property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault.SetSetFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set portion of dependency property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault.OnSetFocusChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Attach event handler when the attached property is set to true
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault.button_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Detach eventhandlers when button is about to be destroyed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MsgBox.Behaviour.SetKeyboardFocusWhenIsDefault.button_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Attach to the onloaded event and set keyboard focus on this button if it is already a default
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MsgBox.Local.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Cancel_Button_Label">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Close__Button_Label">
            <summary>
              Looks up a localized string similar to _Close.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Close_Tip_Label">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Copy_Button_Label">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Copy_Button_ToolTip">
            <summary>
              Looks up a localized string similar to Copy information to clipboard.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.COPY_KEY_TIP">
            <summary>
              Looks up a localized string similar to Press Cntrl+C to copy the displayed text.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.MsgBox_Expander_Header_Title">
            <summary>
              Looks up a localized string similar to More Details.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.No_Button_Label">
            <summary>
              Looks up a localized string similar to _No.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Notificaation_Usage_Description">
            <summary>
              Looks up a localized string similar to Close this dialog by clicking on either button: {0}..
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Notificaation_Usage_Title">
            <summary>
              Looks up a localized string similar to Usage.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.OK_Button_Label">
            <summary>
              Looks up a localized string similar to O_K.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.ToolTip_MoreDetails">
            <summary>
              Looks up a localized string similar to Click to view details on this topic.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Unknown_Error_Message">
            <summary>
              Looks up a localized string similar to An unknown error occured..
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:MsgBox.Local.Strings.Yes_Button_Label">
            <summary>
              Looks up a localized string similar to _Yes.
            </summary>
        </member>
        <member name="T:MsgBox.Internal.ViewModel.Base.BaseViewModel">
            <summary>
            Every ViewModel class is required to implement the INotifyPropertyChanged
            interface in order to tell WPF when a property changed (for instance, when
            a method or setter is executed).
            
            Therefore, the PropertyChanged methode has to be called when data changes,
            because the relevant properties may or may not be bound to GUI elements,
            which in turn have to refresh their display.
            
            The PropertyChanged method is to be called by the members and properties of
            the class that derives from this class. Each call contains the name of the
            property that has to be refreshed.
            
            The BaseViewModel is derived from from System.Windows.DependencyObject to allow
            resulting ViewModels the implemantion of dependency properties. Dependency properties
            in turn are useful when working with IValueConverter and ConverterParameters.
            </summary>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.Base.BaseViewModel.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.NotifyPropertyChanged(() =&gt; this.IsSelected);
            where 'this' is derived from <seealso cref="T:MsgBox.Internal.ViewModel.Base.BaseViewModel"/>
            and IsSelected is a property.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.Base.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.OnPropertyChanged("IsSelected");
            where 'this' is derived from <seealso cref="T:MsgBox.Internal.ViewModel.Base.BaseViewModel"/>
            and IsSelected is a property.
            </summary>
            <param name="propertyName">Name of property to refresh</param>
        </member>
        <member name="E:MsgBox.Internal.ViewModel.Base.BaseViewModel.PropertyChanged">
            <summary>
            Standard event handler of the <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
            </summary>
        </member>
        <member name="T:MsgBox.IconHelper">
            <summary>
            Remove an icon from a window's (system style) title bar:
            Source: http://wpftutorial.net/RemoveIcon.html
            </summary>
        </member>
        <member name="M:MsgBox.IconHelper.RemoveIcon(System.Windows.Window)">
            <summary>
            Call this function from a dialog view to remove a displayed icon from the dialog title bar.
            </summary>
            <param name="window"></param>
        </member>
        <member name="T:MsgBox.Internal.ViewModel.MsgBoxViewModel">
            <summary>
            Source:
            http://blogsprajeesh.blogspot.de/2009/12/wpf-messagebox-custom-control-updated.html
            http://prajeeshprathap.codeplex.com/sourcecontrol/list/patches?ProjectName=prajeeshprathap
            
            A viewmodel that drives an advanced message box dialog window through its life cycle.
            This message box supports:
            - Custom images
            - Help Link Navigation for advanced research in online resources (by the user)
            - (Expander) section with more textual/technical details
            </summary>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.#ctor(System.String,System.String,System.String,MsgBox.MsgBoxButtons,MsgBox.MsgBoxImage,MsgBox.MsgBoxResult,System.Object,System.String,System.Func{System.Object,System.Boolean},System.Boolean,MsgBox.MsgBoxResult,System.Boolean)">
            <summary>
            Class constructor from parameters.
            </summary>
            <param name="caption"></param>
            <param name="messageBoxText"></param>
            <param name="innerMessage"></param>
            <param name="buttonOption"></param>
            <param name="image"></param>
            <param name="defaultButton"></param>
            <param name="helpLink"></param>
            <param name="helpLinkTitle"></param>
            <param name="navigateHelplinkMethod"></param>
            <param name="enableCopyFunction"></param>
            <param name="defaultCloseResult">Determines the result if user closes a dialog with Esc, F4, or Window close button (X)</param>
            <param name="dialogCanCloseViaChrome">Determines whether user can close dialog via Esc, F4, or Window close button (X)</param>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.GetExceptionDetails(System.Exception,System.String,System.String@)">
            <summary>
            Extract a textual tree of inner exceptions from an exception and return its representation as string.
            </summary>
            <param name="exp"></param>
            <param name="textMessage"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.MessageBox_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Message box result is not set if dialog view is closed via F4, Window X button (standard chrome)
            so we determine whether the dialog is allowed to close via these 'hidden' mechanics and cancel it if not.
            
            Otherwise, we set the result to default result here.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.ShowLegalCloseOptionsNotification">
            <summary>
            Show a notification that users should use the labelled choice buttons to close a dialog
            instead of trying escape, ALT-F4, or Window Close (X) ... window chrome accessibilies...
            </summary>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.GetApplicationResource(System.String,System.String)">
            <summary>
            Attempt to locate a dynamic (<seealso cref="T:System.Windows.Media.Imaging.BitmapImage"/>) resource
            and return it or return null if the resource could not be located.
            </summary>
            <param name="resourceKey"></param>
            <param name="fallbackUri"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.CopyTextToClipboard(System.String)">
            <summary>
            Write the supplied string into the Wiindows Clipboard such that
            users can past it into their favourite text editor
            </summary>
            <param name="textToCopy"></param>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.NavigateToUniversalResourceIndicator(System.Object)">
            <summary>
            Default method for navigating the hyperlink. A different method can
            be invoked if the corresponding constructor was used and
            <seealso cref="F:MsgBox.Internal.ViewModel.MsgBoxViewModel.mNavigateHyperlinkMethod"/> was set
            (this method is ignorred in this case).
            </summary>
            <param name="uriTarget"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.SetButtonVisibility(MsgBox.MsgBoxButtons)">
            <summary>
            Determine the visibility of each button based on the given <paramref name="buttonOption"/> parameter.
            </summary>
            <param name="buttonOption"></param>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.GetVisibleButtonDescription(MsgBox.MsgBoxButtons)">
            <summary>
            Gets the localized names of all buttons that are currently visible in the GUI
            as comma seperated list.
            </summary>
            <param name="buttonOption"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.Internal.ViewModel.MsgBoxViewModel.SetupDefaultButton(MsgBox.MsgBoxButtons,MsgBox.MsgBoxResult)">
            <summary>
            Determine a default button (such as OK or Yes) to be executed when the user hits the ENTER key.
            </summary>
            <param name="buttonOption"></param>
            <param name="defaultButton"></param>
        </member>
        <member name="E:MsgBox.Internal.ViewModel.MsgBoxViewModel.ShowNotificationMessage">
            <summary>
            Expose an event that is triggered when the viewmodel tells its view:
            Here is another notification message please show it to the user.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.Title">
            <summary>
            Title of message shown to the user (this is usally the Window title)
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.Message">
            <summary>
            Message content that tells the user what the problem is
            (why is it a problem, how can it be fixed,
             and clicking which button will do what resolution [if any] etc...).
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.InnerMessageDetails">
            <summary>
            More message details displayed in an expander (this can, for example,
            by a stacktrace or other technical information that can be shown for
            trouble shooting advanced scenarious via copy button - CSC etc...).
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CopyImageSource">
            <summary>
            Get/set property to determine a image in the copy message button
            of the dialog.
            
            This property represents the actual IMAGE not the enumeration.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.YesNoVisibility">
            <summary>
            Get/set visibility of Yes/No buttons
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CancelVisibility">
            <summary>
            Get/set visibility of Cancel button
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.OkVisibility">
            <summary>
            Get/set visibility of OK button
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CloseVisibility">
            <summary>
            Get/set visibility of Close button
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.ShowDetails">
            <summary>
            Get/set visibility of Show Details section in dialog
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.IsDefaultButton">
            <summary>
            Get property to determine the default button (if any)
            to be used in the dialog (user can hit ENTER key to execute that function).
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.EnableCopyFunction">
            <summary>
            Get/set property to determine whether the copy message
            function is available to the user or not (default: available).
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.DialogCloseResult">
            <summary>
            Get property to determine whether the dialog can be closed with
            the corresponding result or not. This property is typically used
            with an attached behaviour (<seealso cref="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.DialogCloseResult"/>) in the Views's XAML.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.Result">
            <summary>
            Get the resulting button that has been clicked by the user when working with the message box.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.DefaultCloseResult">
            <summary>
            Get/set property to determine dialog result when user closes it
            via F4 or Window Close (X) button when using Windows standard window chrome.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.DialogCanCloseViaChrome">
            <summary>
            
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.HelpLink">
            <summary>
            Get/set property to determine the address to browsed to when displaying a help link.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.HelpLinkTitle">
            <summary>
            Get/set property to determine the text for displaying a help link.
            By default the text is the toString content of the <seealso cref="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.HelpLink"/>
            but it can also be a different text if that text is set in the constructor.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.DisplayHelpLink">
            <summary>
            Get property to determine whether a helplink should be display or not.
            A helplink should not be displayed if there is no HelpLink information
            available, and it can be dispalyed otherwise.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.AllToString">
            <summary>
            Get property to get all textual information in one text block.
            This property is typically used to copy all text (even details)
            to the clipboard so users can paste it into their email and send
            the problem description off to those who care and know...
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.TypeOfImage">
            <summary>
            Get property to determine type pf image to be shown to the user
            based on <seealso cref="T:MsgBox.MsgBoxImage"/> enumeration.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.YesCommand">
            <summary>
            Get the command that is executed when the user clicked the 'Yes' button.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.NoCommand">
            <summary>
            Get the command that is executed when the user clicked the 'No' button.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CancelCommand">
            <summary>
            Get the command that is executed when the user clicked the 'Cancel' button.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CloseCommand">
            <summary>
            Get the command that is executed when the user clicked the 'Close' button
            or attempted to close the dialog via ESC-Key binding.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.OkCommand">
            <summary>
            Get the command that is executed when the user clicked the 'OK' button.
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.NavigateToUri">
            <summary>
            Execute a command that starts a new (browser)
            process to navigate to this (web) target
            </summary>
        </member>
        <member name="P:MsgBox.Internal.ViewModel.MsgBoxViewModel.CopyText">
            <summary>
            Execute a command to copy the text string supplied
            as parameter into the clipboard
            </summary>
        </member>
        <member name="T:MsgBox.MsgBoxButtons">
            <summary>
            This enumeration describes the possible GUI elements (OK, Cancel, Yes, No button)
            that are displayed with the message. Displaying these GUI elements gives the user
            a chance to review a message and interact with the system based on the displayed content.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.YesNo">
            <summary>
            Display Yes and No GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.YesNoCancel">
            <summary>
            Display Yes, No, and No GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OKCancel">
            <summary>
            Display OK and Cancel GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OKClose">
            <summary>
            Display OK and Close GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OK">
            <summary>
            Display OK GUI element
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.Close">
            <summary>
            Display Close GUI element
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.YesNoCopy">
            <summary>
            Display Yes, No, and Copy GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.YesNoCancelCopy">
            <summary>
            Display Yes, No, Cancel, and Copy GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OKCancelCopy">
            <summary>
            Display OK, Cancel, and Copy GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OKCloseCopy">
            <summary>
            Display OK, Close, and Copy GUI elements
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.OKCopy">
            <summary>
            Display OK, Copy GUI element
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxButtons.CloseCopy">
            <summary>
            Display Close and Copy GUI element
            </summary>
        </member>
        <member name="T:MsgBox.MsgBoxImage">
            <summary>
            Type of images that can be displayed in a message box
            (indexes need to increment in the shown order because they
            into a static array: MsgBoxViewModel.MsgBoxImageResourcesUris.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Information">
            <summary>
            Display a standard image to indicate an imformal message
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Question">
            <summary>
            Display a standard image to indicate a message that contains a question
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Error">
            <summary>
            Display a standard image to indicate a message that contains an error
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.OK">
            <summary>
            Display a standard image to indicate a message that contains nice to know information
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Alert">
            <summary>
            Display a standard image to indicate a message that contains information about a fatal problem.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Default">
            <summary>
            Display a standard image to indicate a message that is not classified.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Warning">
            <summary>
            Display a standard image to indicate a message that contains a warning.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Default_OffLight">
            <summary>
            Display a standard image with a light turned off.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Default_RedLight">
            <summary>
            Display a standard image with a red light turned on.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Information_Orange">
            <summary>
            Display a standard image with a orange light turned on.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Information_Red">
            <summary>
            Display a standard image indicating an important information.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.Process_Stop">
            <summary>
            Display a standard image indicating the end of a process run or program exit.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxImage.None">
            <summary>
            Do not show an image at all.
            </summary>
        </member>
        <member name="T:MsgBox.MsgBoxResult">
            <summary>
            This enumeration describes the possible results from displaying a message. A result is directly
            equivalent to a GUI element (OK, Cancel, Yes, No button) that a user clicked to close the message view.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.None">
            <summary>
            This is mostly technically needed for properties that implement
            automatic magic, such as, setting a useful default button. This
            magic occurs only if this default parameter is set in the
            constructor/interface - otherwise the button set by the caller
            is used.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.NoDefaultButton">
            <summary>
            This can be used to tell the messagebox sub-system explicitly to not
            set any default button (which is rather un-uasual but possible if
            the user needs to determine somthing that has a real 50:50 chance
            of being ansered).
            
            This Enum member can only be set in the defaultbutton parameter of the
            constructor but will never appear as actual result of a messagebox display.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.OK">
            <summary>
            The result value of the message box is OK.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.Cancel">
            <summary>
            The result value of the message box is Cancel.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.Yes">
            <summary>
            The result value of the message box is Yes.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.No">
            <summary>
            The result value of the message box is No.
            </summary>
        </member>
        <member name="F:MsgBox.MsgBoxResult.Close">
            <summary>
            The result value of the message box is Close.
            </summary>
        </member>
        <member name="T:MsgBox.View.Modern.Behavior.ModernDialogCloser">
            <summary>
            Implements an attached property that enables cloasing a
            <seealso cref="T:MsgBox.View.Modern.ModernDialog"/> view view viewmodel implementation.
            </summary>
        </member>
        <member name="F:MsgBox.View.Modern.Behavior.ModernDialogCloser.DialogCloserProperty">
            <summary>
            Backing store of the Dialog closer dependency property.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Behavior.ModernDialogCloser.GetDialogCloser(System.Windows.DependencyObject)">
            <summary>
            Get portion of the Dialog closer dependency property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.View.Modern.Behavior.ModernDialogCloser.SetDialogCloser(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set portion of the Dialog closer dependency property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:MsgBox.View.Modern.ModernDialog">
            <summary>
            Represents a Modern UI styled dialog window.
            </summary>
        </member>
        <member name="F:MsgBox.View.Modern.ModernDialog.BackgroundContentProperty">
            <summary>
            Identifies the BackgroundContent dependency property.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.ModernDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MsgBox.View.Modern.ModernDialog"/> class.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.ModernDialog.Show(MsgBox.Internal.ViewModel.MsgBoxViewModel,System.Windows.Window)">
            <summary>
            Display a message box based on a given view model.
            </summary>
            <param name="viewModel">The viewmodel contains additional
            parameters for the message view.</param>
            <param name="owner">The message view will be attached to this owning window
            of this parameter is non-null, otherwise Application.Current.MainWindow
            is being used.</param>
            <returns></returns>
        </member>
        <member name="P:MsgBox.View.Modern.ModernDialog.BackgroundContent">
            <summary>
            Gets or sets the background content of this window instance.
            </summary>
        </member>
        <member name="T:MsgBox.View.Modern.Windows.Converters.BooleanToFontWeightConverter">
            <summary>
            Converts a boolean value to a font weight (false: normal, true: bold)
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.BooleanToFontWeightConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.BooleanToFontWeightConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:MsgBox.View.Modern.Windows.Converters.BooleanToVisibilityConverter">
            <summary>
            Converts boolean to visibility values.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:MsgBox.View.Modern.Windows.Converters.NullToVisibilityConverter">
            <summary>
            Converts a null value to Visibility.Visible and any other value to Visibility.Collapsed
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:MsgBox.View.Modern.Windows.Converters.ToLowerConverter">
            <summary>
            Converts string values to lower case.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.ToLowerConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.ToLowerConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:MsgBox.View.Modern.Windows.Converters.ToUpperConverter">
            <summary>
            Converts string values to upper case.
            </summary>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.ToUpperConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:MsgBox.View.Modern.Windows.Converters.ToUpperConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:MsgBox.View.MsgBoxDialog">
            <summary>
            Interaction logic for MsgBoxDialog.xaml
            
            Source: http://www.codeproject.com/Articles/70223/Using-a-Service-Locator-to-Work-with-MessageBoxes
            </summary>
            <summary>
            MsgBoxDialog
            </summary>
        </member>
        <member name="M:MsgBox.View.MsgBoxDialog.#ctor">
            <summary>
            Class Constructor
            </summary>
        </member>
        <member name="M:MsgBox.View.MsgBoxDialog.Show(MsgBox.Internal.ViewModel.MsgBoxViewModel,System.Windows.Window)">
            <summary>
            Display a message box based on a given view model.
            </summary>
            <param name="viewModel">The viewmodel contains additional
            parameters for the message view.</param>
            <param name="owner">The message view will be attached to this owning window
            of this parameter is non-null, otherwise Application.Current.MainWindow
            is being used.</param>
            <returns></returns>
        </member>
        <member name="M:MsgBox.View.MsgBoxDialog.OnSourceInitialized(System.EventArgs)">
            <summary>
            Remove the icon from the window chrome to give this window a message box like appearrance.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MsgBox.View.MsgBoxDialog.GetOwnerWindow">
            <summary>
            Attempt to find the owner window for a message box
            </summary>
            <returns>Owner Window</returns>
        </member>
        <member name="M:MsgBox.View.MsgBoxDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MsgBox.View.MsgBoxView">
            <summary>
            Interaction logic for MsgBoxView.xaml
            </summary>
            <summary>
            MsgBoxView
            </summary>
        </member>
        <member name="M:MsgBox.View.MsgBoxView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MsgBox.View.MsgBoxView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
